http://cs229.stanford.edu/materials.html
http://www.holehouse.org/mlclass/

01-01 Introduction
	Examples
		Database mining : web click data, medical records, biology, engineering
		App that can't be programmed by hand : Auto heli, handwriting recognition, Natural Language Processing(NLP), Computer Vision
		Self-customizing programs : Amazon, Netflix product recommendations
		Understand human learning : brain, real AI
	What is machine learning
		Arthur Samuel(1959) : Field of study that gives computers the ability to learn without being explicitly programmed.
		Tom Mitchel(1998) : A computer program is said to "learn" from experience E with respect to some task T and some performance mearsure P, if P on T improves with E.
	Supervised learning
		data with "right answers" explicitly given
	Unsupervised learning
		data with no answers, instead system is asked to find structure within
		Example : Google news
		Used in : Organize computing clusters, Social network analysis, Market segmentation, Astronomical data analysis
		Cocktail party problem : separate mixed audio data
	Regression/Classification
		Regression : predict continuous valued output
		Classification : predict discrete valued output

01-02 Linear regression with one variable
	Training set
		m=number of training examples
		x="input" variable / features
		y="output" variable / "target" variable
		<>, <<>> : superscript, subscript
		(x,y)=one training example
		(x<i>,y<i>)=i<th> training example
		x=2104 1416 1534, y=460 232 315 158, x<1>=2104 x<2>=1416 y<1>=460
	Hypothesis
		h maps x's to y's
		h<<θ>>(x) = θ<<0>> + θ<<1>>*x
		Linear regression with one variable, Univariate linear regression, One variable x
	Parameters
		θ<<0>>,θ<<1>> 
	Cost function
		Squared error function
		J(θ<<0>>,θ<<1>>) = 1/(2*m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)^2
		Is convex/bowl shaped, always true for linear regression
		contour, circle is same J value, bowl with bottom in middle
	Goal
		Minimize J(θ<<0>>,θ<<1>>)
		visual : goto bottom of bowl, inner most circle of contour map
	Gradient descent
		Process
			repeat : θ<<j>>:=θ<<j>>-αδ/δθ<<j>>J(θ<<0>>,θ<<1>>), for j=0 j=1
			update : θ's simultaneously
		Derivative = δ/δθ<<j>>J(θ<<0>>,θ<<1>>)
			Direction of movement
			Goes in direction down slope
			If derivative >0, up slope : θ goes backwards -> decreases 
			If derivative <0, down slope : θ goes forwards -> increases 
		Learning rate = α
			Size of movement
			 If too small, gradient descent can be slow
			If too large, gradient descent can overshoot minimum, may fail to converge, can even diverge
			Even if fixed gradient descent can converge to a local minimum, automatically take smaller steps
	Gradient descent for Linear regression
		Derivative = δ/δθ<<j>>J(θ<<0>>,θ<<1>>)
			   = δ/δθ<<j>>[(1/2m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)^2]
			   = δ/δθ<<j>>[(1/2m)*(i:1->m)Σ(θ<<0>>+θ<<1>>*x<i>-y<i>)^2]
		   θ<<0>> = [(1/m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)]
		   θ<<1>> = [(1/m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)*x<i>]
		Repeat & update simultaneously
		   θ<<0>>:= θ<<0>> - [(α/m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)]
		   θ<<1>>:= θ<<1>> - [(α/m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)*x<i>]
		"Batch" Gradient descent
			Compute over all training set/samples,(i:1->m)Σ

01-03 Linear Algebra review
	Matrix
		Rectangular array of numbers
		Dimension of matrix : number of rows * number of columns
			   1402 191
			A=[1371 821] 4*2 matrix
			   949 1437
			   147 1448
		Matrix elements : A<<ij>> = "i,j entry" in the i<th> row, j<th> column
			A<<11>>=1402 A<<12>>=191 A<<32>>=1437 A<<41>>=147
			A<<43>>=undefined
	Vector
		n * 1 matrix
			   460
			y=[232] 4-dimensional vector
			   315
			   178
		Vector elements : y<<i>>=i<th> element
			y<<1>>=460 y<<2>>=232 y<<5>>=undefined
		index
			1-indexed(math)		0-indexed(programming)
			   y<<1>>			   y<<0>>
			y=[y<<2>>]			y=[y<<1>>]
			   y<<3>>			   y<<2>>
			   y<<4>>			   y<<3>>
	Addition
		Must be same dimension
		  1   0       4   0.5       5    0.5
		[ 2   5 ] + [ 2   5 ]  =  [ 4   10 ]
		  3   1       0   1         3    2
	Scalar multiplication
		     1  0     3   0     1  0
		3 * [2  5] = [6  15] = [2  5] * 3
		     3  1     9   3     3  1
		     4  0     4   0     1  0
		[16  8] / 4 = 1/4 * [16  8] = [4  2]
	Matrix-vector multiplication
		Concept
			A(m*n matrix)*x(n-d vector)	= y(m-d vector)
			To get y<<i>>, multiply A's i<th> row with elements of vector x and add them up
			Must be, number columns of matrix =	number rows, dimension of vector
		Example
			 1  2  1  5     1     1+6+2+5     14
			[0  3  0  4] * [3] = [0+9+0+4] = [13]
			-1 -2  0  0     2    -1-6+0+0     -7
			                1
	Matrix-matrix multiplication
		Concept
			A(m*n matrix)*B(n*p matrix)	= C(m*p matrix)
			To get C's i<th> column, multiply A with i<th> column of B
			Must be, number columns of A = number rows of B
		Example
			 1  3  2     1	3    1+0+10   3+3+4    11  10
			[4  0  1] * [0  1] = [4+0+5  12+0+2] = [9  14]
			             5  2
	Application to house prices
		House sizes
			2104	1416	1534	852
		3 competing hypothesis
			h<<θ>>(x)	=  -40 + 0.25*x
			h<<θ>>(x)	=  200 + 0.10*x
			h<<θ>>(x)	= -150 + 0.40*x
		In matrix notation
			 1  2104                                    486  410  692
			 1  1416       -40     200   -150           314  342  416
			[1  1534]  x  [  0.25    0.1    0.4  ]  =  [344  353  464]
			 1   852                                    173  285  191
	Matrix multiplication properties
		Is not commutative :  (A*B)  != (B*A), even dimension can change
		Is Associative     :  (A*B)*C = A*(B*C)
	Identity matrix
		Similar to 1 in real number
			       1  0  0
			I  =  [0  1  0]
			       0  0  1
		Matrix A * Identity Matrix = Matrix A
		I1*A = A*I2
		Dimension of I1 and I2 can be different
	Matrix Inverse
		Similar to 1/number
		Only square matrix may have an inverse
		Matrix A * Inverse of Matrix A	= Identity Matrix
		A * A<-1> = I
		Example
			 3   4        0.4  -0.1         1  0
			[2  16]  *  [-0.05  0.075]  =  [0  1]
		"Singular" or "Degenerate" matrices don't have an inverse, matrix is close to 0
	Matrix Transpose
		Matrix flipped along diagonal where elements are reversed
		B = A<T>, B<<ij>> = A<<ji>>
		Example
			     1  2  0                 1  3
			A = [3  5  9]        A<T> = [2  5]
			                             0  9

02-01 Linear Regression with multiple variables
	Features
		     x<<i>>
 		x = [x<<0>>]
		     x<<1>>
		     ...
		     x<<n>>
	Parameters
		θ: θ<<0>>, θ<<1>>,...,θ<<n>>
		     θ<<0>>
		θ = [θ<<1>>]
		      ...
		     θ<<n>>
	Hypothesis		
		h<<θ>>(x) = θ<T>x
		Multivariate linear regression
	Cost function
		J(θ) = (1/2m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)^2
	Gradient descent
		Process
			repeat : θ<<j>>:=θ<<j>>-(α/m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)*x<<j>><i>
			update : θ's simultaneously for j = 0..n
		Optimizing 1 : Feature scaling
			Make sure feature values are on similar scale
			Keep contour shape of cost function in parameter θ space a circle
			Normalization, -1 <= x<<i>> <= 1 range
		Optimizing 2 : Learning rate, α
			Check cost function VS number of gradient descent iterations, J VS Epoch
			Convergence
				If J decreases as Epoch increases -> gradient descent is working correctly -> increase α 
				If not -> overshooting -> decrease α
				If α is too small = slow convergence
				If α is too large = cost may not decrease on every iteration, may not converge
			Tuning
				Start α small
				while gradient descent is working, increase by factor of 3, 0.001 0.003 0.01 0.03 0.1 0.3 1..
	Normal equation
		Solve J minimum analytically
			     x<0><T>
			X = [x<1><T>]
			     ...
			     x<n><T>
			θ = (X<T>X)<-1>X<T>y, find θ min
		Non-invertibility
			No (X<T>X)<-1> when features have bad elements
				redundancy : 2 area features one in square meters, other in square feet
				too many features : feature number > training set number
			Drop some features, use regularization
	Gradient descent VS Normal equation
		GD
			Need to chose α
			Needs many iterations
			Works well even for very large number of features
			Works for other learning algorithms
		NE
			No α
			No iteration
			Slow for very large features, need to compute (X<T>X)<-1>
			Works only for linear regression

02-02 Octave Tutorial
	Basics
		';' : command chaining without result display
		',' : command chaining with result display
		size() : dimension of matrix
		length() : biggest dimension of matrix
		who & whos : list variables & with info
		clear() : delete variable from memory
		load() : get variable from file, load to memory
		save() : save variable to file
			save 'hello.txt' var
		[1:10] 1:10 not same?
	Creation
		create matrix
			[1 2;3 4;5 6] : 3x2 matrix
			[1 2 3 4] : 4 dimensional row vector, 1x4 matrix
			[1;2;3] : 3 dimensional column vector, 3x1 matrix
			[0:2:10] : row vector with element value, 0->10 & increment 2
		special matrix
			zeroes() : matrix with all element zeroes
			ones() : matrix with ones
			eye() : identity matrix
			magic() : magic matrix, sum of rows columns diagonal are same
			rand() : matrix with random elements
			randn() : matrix with gaussian distribution elements
	Manipulation
		matrix element
			B = [1 2 3;4 5 6;7 8 9];
			B(3,2) : element at row 3, column 2
			B(2,:) : all elements on row 2
			B(:,2) : all elements on column 2
			B([1 3],:) : all elements on row 1 and 2
		matrix append
			[A B] : append B to column/right of A, same as [A,B]
			[A;B] : append B to row/bottom of A
		vector conversion
			B(:) : convert matrix B to a vector, 3x4 -> 12x1
		matrix operation
			A * B : matrix multiplication
			A + B : matrix addition
			A' : matrix transpose
			pinv() : inverse matrix (does'nt work for large size?)
			. : element operation
				A .* B : element multiplication, same dimension
				A .^2 : square of elements
				1 ./ A : inverse of elements, A .^(-1)
			log() : log of elements
			exp() : exponential of elements
			abs() : absolute of element
			prod() : multiply elements, column wise
			floor(), ceil() : round down elements, round up
			flipud() : flip matrix upside down
			max()
				max(A) : max value of elements, column wise, max(A,[],1)
				[val,ind] = max(A) : maximum value and index of elements, column wise
				max(A,B) : compare and select max value of elements
				max(A,[],2) : max value of elements, row wise
			A < B : comparison of elements, gives binary answer
			find() : find index, column wise
			sum() : add elements, column wise
				sum(A) : sum elements, column wise, sum(A,1)
				sum(A,2) : sum elements, row wise
	Visualization
		hist() : display histogram
		plot() : display 2D plots
			x=[0:1:360], y1=sin(2*pi*x/360), y2=cos(2*pi*x/360)
			plot(x,y1)
		hold on : keep display
		close : close display
		xlabel(), ylabel() : name axis
		legend() : name line
		print -dpng : save as png image
		figure() : select display window
		subplot : select from multi-display window
				subplot(2,3,4) : 2x3 display, select 4th
		axis : change axis value
			axis([0.5 1 -1 1]) : 0.5<x<1, -1<y<1
		imagesc() : visualize matrix
			imagesc(magic(11));colorbar;colormap(gray);
	Flow control
		Loop
			for i=1:10,disp(i);end;
			i=1;while i<=5,v(i)=50;i++;end;
		If
			if v(1)==1,
				disp('value is 1');
			elseif v(1)==2,
				disp('value is 2');
			else
				disp('value is not 1 nor 2');
			end;
	Function
		Name
			saved as .m file ,function name must be same as file name
		Path
			.m file must be in octave search path
			addpath() add path to octave search path, savepath() save search path
		Example
			squareAndCubeNumber, function returning multiple values
				Code
					function [y1 y2] = squareAndCubeNumber(x);
					y1 = x^2;
					y2 = x^3;
				Use
					[a b] = squareAndCubeNumber(10) -> a = 100, b = 1000
			cost function
				Code
					function J = costJ(X,y,theta)
					m = size(X,1);
					h = X*theta;
					sqrErr = (h-y).^2;
					J = 1/(2*m)*sum(sqrErr);
				Use
					X=[1 1;1 2;1 3];y=[1;2;3];
					theta=[0;1];costJ(X,y,theta) -> 0
					theta=[0;0];costJ(X,y,theta) -> 2.33

03-01 Logistic Regression
	Hypothesis (Binary Classification)
		Classification is logistic regression 
		Linear regression
			h<<θ>>(x) = θ<T>x, >1 or <0 possible
		Possible results 0 and 1, restrict prediction to range of 0-1
			0 <= h<<θ>>(x) <= 1
		Probability that y=1 given x parameterized by θ
			P(y=1|x;θ) = h<<θ>>(x)
			P(y=0|x;θ) = 1 - P(y=1|x;θ)
		Sigmoid function, logistic function		
			h<<θ>>(x) = g(θ<T>x)
			      g(z) = 1/(1+e^(-z))
		Decision boundary
			line that separates class regions, depend only on parameter θ
			θ<T>x = 0
			θ<T>x >= 0 -> y=1 likely
			θ<T>x < 0  -> y=0 likely
	Cost function (Binary Classification)	
		Linear regression
			J(θ)        = (1/m)*(i:1->m)ΣCost(h<<θ>>(x<i>),y<i>)
			Cost(h(x),y) = (1/2)*(h(x)-y)^2
			because of sigmoid h(x), J is non-convex, can't use
		Logistic regression
			J(θ)        = (1/m)*(i:1->m)ΣCost(h<<θ>>(x<i>),y<i>)
			Cost(h(x),y) = -log(h(x)) if y=1
			             = -log(1-h(x)) if y=0
 			             = -y*log(h(x)) - (1-y)*log(1-h(x))
			             = -log((2y-1)*h-y+1) not ?
			If prediction is wrong cost is huge, learning algorithm is penalized heavily
			J(θ)        = (-1/m)*(i:1->m)Σ[y<i>*log(h<<θ>>(x<i>)) + (1-y<i>)*log(1-h<<θ>>(x<i>))]
	Gradient descent
		repeat {
			θ<<j>> := θ<<j>> - (α/m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)*x<<j>><i>
			upate simultaneously all θ<<j>>
		}
		Identical to linear regression, h=sigmoid
		Error in lecture, α should be α/m
	Optimization
		Basic
			Feature scaling + learning rate tuning
		Advanced
			Conjugate gradient, BFGS, L-BFGS
			α auto tuning, fast
		Octave example
			Code
				function [jVal, gradient] = costFunction(theta)
				jVal = (theta(1)-5)^2 + (theta(2)-5)^2;
				gradient = zeros(2,1);
				gradient(1) = 2*(theta(1)-5);
				gradient(2) = 2*(theta(2)-5);
			Use
				options=otimset('GradObj','on','MaxIter','100');
				initialTheta = zeros(2,1);
				[optTheta,functionVal,exitFlag]=fminunc(@costFunction,initialTheta,options)
	Multi-class classification (One vs all/rest)
		Concept
			Convert muli-class classification problem to many binary classification problems
		Detail
			Expand & split training set
				C1 C2..Cn -> C1 rest
				             C2 rest
				             ...
				             Cn rest
				n = number of classes
			Expand & split hypothesis
				h<<θ>>(x) -> h<<θ>><1>(x) = P(y=1|x;θ)
				             h<<θ>><2>(x) = P(y=n|x;θ)
				             ...
				             h<<θ>><n>(x) = P(y=n|x;θ)
			Train each hypothesis on corresponding training set
			Apply
				On new input x, run all hypothesis and pick class with highest probability

03-02 Regularization
	Concept
		Underfit
			Not even fitting on training data
			High bias, too few features
			Increase features
		Overfit
			Fit training data well but generalize poorly
			High variance, too many features
			Decrease features or use regularization
		Regularization
			Method of addressing/resolving overfitting while keeping all features
			Decrease magnitude/value of parameters θ's
			Decrease feature's contribution factor to prediction
			Makes hypothesis simpler and resistant to overfitting
	Regularized parameter
		new cost function = old cost function + shrinking term
		shrinking term    = (λ/2m)*(j:1->n)Σθ<<j>>^2
		m = number of training set
		n = number of features
			θ<<0>> not modified
		λ= regularization parameter
			If too large = underfitting
	Regularized linear regression
		Hypothesis
			h<<θ>>(x) = θ<T>x, x<<0>> = 1
		Cost function
			J(θ) = (1/2m)[(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)^2 + λ(j:1->n)Σθ<<j>>^2]
		Gradient descent
			repeat & update {
				θ<<0>> := θ<<0>> - (α/m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)*x<<0>><i>
      				θ<<j>> := (1-αλ/m)*θ<<j>> - (α/m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)*x<<j>><i>
				j = 1..n
			}
			θ<<j>> is modified by factor (1-α*λ/m) before every update
		Normal equation
			     x<1><T>                y<1>
			X = [x<2><T>]          y = [y<2>]
			     ...                    ...
			     x<m><T>                y<m>
			     mx(n+1) matrix
			θ = (X<T>X + λR)<-1>X<T>y, find θ min
			     0 0 0
			R = [0 1 0] for n=2
			     0 0 1
			Regularized form doesn't have non-invertibility problem
	Regularized logistic regression
		Hypothesis
			h<<θ>>(x) = 1/(1+e^(-θ<T>x)), x<<0>> = 1
		Cost function
			J(θ) = (-1/m)*(i:1->m)Σ[y<i>*log(h<<θ>>(x<i>)) + (1-y<i>)*log(1-h<<θ>>(x<i>))] + [(λ/2m)*(j:1->n)Σ(θ<<j>>^2)]
		Gradient descent
			repeat & update {
				θ<<0>> := θ<<0>> - (α/m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)*x<<0>><i>
      				θ<<j>> := (1-αλ/m)*θ<<j>> - (α/m)*(i:1->m)Σ(h<<θ>>(x<i>)-y<i>)*x<<j>><i>
				j = 1..n
			}

04 Neural Networks Representation
	Concept
		Problem
			Solving complex problems with single regression requires lots of features
			If number of features gets huge this method is computationally impractical
			In computer vision 50x50 pixel image classification may have over 3 million features
		Solution
			Instead of one combine many logistic regression, logistic units
			Unit outputs from a layer become features for next layer units
			On top of original features network learns and add extra features
	Architecture
		Input layer - Hidden layers - Output layer
		a<j><<i>> : activation of unit 'i', in layer 'j'
		Θ<j> : matrix of weights(parameters) controlling function mapping from layer 'j' to 'j+1'
			s<j> units in layer j, s<j+1> units in layer (j+1) -> dimension is s<j+1> x (s<j>+1)
	Implementation : Forward Propagation
		Non-vector notation
			Layer 1 : Input, 3 units, 1 bias
				x<<1>>,x<<2>>,x<<3>>
				x<<0>> = 1
			Layer 2 : Hidden, 3 units, 1 bias
				a<2><<1>> = g(Θ<1><<10>>x<<0>> + Θ<1><<11>>x<<1>> + Θ<1><<12>>x<<2>> + Θ<1><<13>>x<<3>>)
				a<2><<2>> = g(Θ<1><<20>>x<<0>> + Θ<1><<21>>x<<1>> + Θ<1><<22>>x<<2>> + Θ<1><<23>>x<<3>>)
				a<2><<3>> = g(Θ<1><<30>>x<<0>> + Θ<1><<31>>x<<1>> + Θ<1><<32>>x<<2>> + Θ<1><<33>>x<<3>>)
				a<2><<0>> = 1
				Θ<1>     = 3x4 matrix
			Layer 3 : Output, 1 unit
				a<3><<1>> = g(Θ<2><<10>>a<2><<0>> + Θ<2><<11>>a<2><<1>> + Θ<2><<12>>a<2><<2>> + Θ<2><<13>>a<2><<3>>)
				          = h<<Θ>>(x)
				Θ<2>     = 1x4 matrix
		Vectorized notation
			Let a<1> = x
			        a<1><<0>>
			a<1> = [a<1><<1>>]
			        a<1><<2>>
			        a<1><<3>>
			z<2> = Θ<1>a<1>
			        z<2><<1>>
			z<2> = [z<2><<2>>]
			        z<2><<3>>
			a<2> = g(z<2>)
			     = g(Θ<1>a<1>)
			a<3> = g(z<3>)
			     = g(Θ<2>a<2>)
			     = g(Θ<2>g(Θ<1>a<1>))
		Forward propagation
			a<n> = g(Θ<n-1>a<n-1>)
			     = g(Θ<n-1>g(Θ<n-2>a<n-2>))
			     = ...
			     = g(Θ<n-1>g(Θ<n-2>g(..g(Θ<1>a<1>))))
	Application
		x1,x2 ∈ {0,1}
		XOR : y = x1 XOR x2
			[0 0][0 1][1 0][1 1] -> [0][1][1][0]
		AND : y = x1 AND x2
			[0 0][0 1][1 0][1 1] -> [0][0][0][1]
			x = [1;x1;x2]
			Θ<1> = [-30 20 20]
			a<2> = g(-30 + 20*x1 + 20*x2)
			[0 0] -> g(-30) ≈ 0
			[0 1] -> g(-10) ≈ 0
			[1 0] -> g(-10) ≈ 0
			[1 1] -> g(10)  ≈ 1
		OR : y = x1 OR x2
			[0 0][0 1][1 0][1 1] -> [0][1][1][1]
			x = [1;x1;x2]
			Θ<1> = [-10 20 20]
			a<2> = g(-10 + 20*x1 + 20*x2)
			[0 0] -> g(-10) ≈ 0
			[0 1] -> g(10)  ≈ 1
			[1 0] -> g(10)  ≈ 1
			[1 1] -> g(30)  ≈ 1
		NOT : y = NOT x1
			[0][1] -> [1][0]
			x = [1;x1]
			Θ<1> = [10 -20]
			a<2> = g(10 - 20*x1)
			[0] -> g(10)  ≈ 1
			[1] -> g(-10) ≈ 0
		NOT AND NOT : y = (NOT x1) AND (NOT x2)
			[0 0][0 1][1 0][1 1] -> [1][0][0][0]
			x = [1;x1;x2]
			Θ<1> = [10 -20 -20]
			a<2> = g(10 - 20*x1 - 20*x2)
			[0 0] -> g(10)  ≈ 1
			[0 1] -> g(-10) ≈ 0
			[1 0] -> g(-10) ≈ 0
			[1 1] -> g(-30) ≈ 0
		XNOR : y = x1 XNOR x2 = NOT (x1 XOR x2)
			[0 0][0 1][1 0][1 1] -> [1][0][0][1]
			Layer 1 : input
				x = [1;x1;x2]
			Layer 2 : hidden
				a<2><<1>> = g(-30 + 20*x1 + 20*x2), AND
				a<2><<2>> = g(10 - 20*x1 - 20*x2), NOT AND NOT
			Layer 3 : output
				a<3><<1>> = g(-10 +20*a<2><<1>> + 20*a<2><<2>>), OR
			Result
				x1 x2 a<2><<1>> a<2><<2>> a<3><<1>>
				0   0    0         1         1
				0   1    0         0         0
				1   0    0         0         0
				1   1    1         0         1
			Architecture
				Network is combination of AND, NOT AND NOT, OR logistic units
				Layer 2 : AND, NOT AND NOT
				Layer 3 : OR
	Multi-class classification
		Concept
			Similar to multi-class logistisc classification
			Instead of single unit network's output layer has multiple units
			Each units in the output layer corresponds to each classes
		Multi-class logistic classification
			x = input
			y = label, y ∈ {1,2,3..}
		Neural network multi-class classification, computer vision
			x = input from one of the class
			y = label, y ∈ {c1,c2,c3..cn}, c ∈ n dimensional vector, nx1
		Computer vision
			4 classes, pedestrian car motorcycle truck
			pedestrian  -> [1;0;0;0]
			car         -> [0;1;0;0]
			motorcycle  -> [0;0;1;0]
			truck       -> [0;0;0;1]

05 Neural Networks Learning
	Overview
		Randomly initialize weights to small near zero values, Θ
		Calculate output by forward propagation, h(x)
		Calculate cost, J(Θ)
		Calculate gradient of cost by back propagation, δ->Δ->D
		Validate back propagation by numeric gradient checking before training network
		Train network by minimizing cost using gradient descent or advanced optimization
	Cost function
		Regularized logistic regression
			J(θ) = (-1/m)*(i:1->m)Σ[y<i>*log(h<<θ>>(x<i>)) + (1-y<i>)*log(1-h<<θ>>(x<i>))] + [(λ/2m)*(j:1->n)Σ(θ<<j>>^2)]
		NN version
			Layout
				L = number of layers in network, including input and output layers
				s<<l>> = number of units in layer l, not counting bias
				K = number of output units
				h<<Θ>>(x) ∈ K dimensional vector
				(h<<Θ>>(x))<<i>> = i'th ouput
			J(Θ) = (-1/m)*(i:1->m)Σ(k:1->K)Σ[y<<k>><i>*log(h<<Θ>>(x<i>))<<k>> + (1-y<<k>><i>)*log(1-h<<Θ>>(x<i>))<<k>>] + [(λ/2m)*(l:1->L-1)Σ(i:1->s<<l>>)Σ(j:1->s<<l+1>>)Σ(Θ<<ji>><l>^2)]
	Gradient Descent
		Overview
			Get error of network
			Reverse calculate error of each inner unit in network
			Calculate network's partial derivative of cost function
			Calculate partial derivative of training set
			Do gradient descent
		Forwardp ropagation, L=4
			Calculates activation of unit in network
			Weighted sum of activations of units from previous layer
			Layer 1 : input
				a<1> = x 
				z<2> = Θ<1>a<1>
			Layer 2
				a<2> = g(z<2>), add a<2><<0>>
				z<3> = Θ<2>a<2>
			Layer 3
				a<3> = g(z<3>), add a<3><<0>>
				z<4> = Θ<3>a<3>
			Layer 4 : output
				a<4> = hΘ(x) = g(z<4>)
		Back propagation, L=4
			Calculates cost error of unit in network
			Weighted sum of cost errors of units from following layer
			δ<l><<j>> = error of unit j in layer l
			Calculate error of output L=4
				δ<4> = a<4> - y = (h<<Θ>>(x)) - y
			Back-calculate error of unit in preceding layer from output error
				δ<3> = (Θ<3>)<T>δ<4> .* g'(z<3>)
				g'(z<3>) = a<3> .* (1-a<3>)
			Use errors of (layer)'s unit to back-calcuate errors of (layer-1)'s unit
				δ<l> = (Θ<l>)<T>δ<l+1> .* (a<l> .* (1-a<l>))
			Repeat back-calulation process untill input layer is reached
				δ<L-1>, δ<L-2>, ...δ<3>, δ<2>
				δ<1> doesn't exist since error of input is zero
			Example, 2 2 2 1 nn
				δ<2><<1>> = Θ<2><<11>>*δ<3><<1>> + Θ<2><<21>>*δ<3><<2>>
				δ<2><<2>> = Θ<2><<12>>*δ<3><<1>> + Θ<2><<22>>*δ<3><<2>>
				δ<3><<1>> = Θ<3><<11>>*δ<4><<1>>
				δ<3><<2>> = Θ<3><<12>>*δ<4><<1>>
				δ<4><<1>> = a<4><<1>> - y
		Partial derivative (for single set)
			Calculate network partial derivative
				∂/∂Θ<l><<ij>>J(Θ) = a<l><<j>>*δ<l+1><<i>>, λ=0
		Partial derivative (for training set)
			Above calculates partial derivative for single element
			Repeat process to calculate rest, sum them up to get Δ
				         Δ = sum of partial derivatives over training set
				Δ<l><<ij>> = (i:1->m)Σ[∂/∂Θ<l><<ij>>J(Θ)]
				           = (i:1->m)Σ[a<l><<j>>*δ<l+1><<i>>]
				      Δ<l> = (i:1->m)Σ[δ<l+1>(a<l>)<T>]
			Calculate regularized partial derivative D
				 D<l><<ij>> = (1/m)(Δ<l><<ij>>) +λΘ<l><<ij>>, if j != 0
				            = (1/m)(Δ<l><<ij>>), if j = 0 for bias unit
				            = (∂/∂Θ<l><<ij>>)J(Θ)
	Application
		Advanced optimization routines, Octave
			Unroll parameters(matrices) : routine uses vectors, parameters in matrix form need to be converted to vectors
			NN : 4 layers, weight parameters Θ<l>, gradient D<l>
			theta1 = Θ<1>, 10x11 matrix
			theta2 = Θ<2>, 10x11 matrix
			theta3 = Θ<3>, 1x11 row vector
			Matrix -> Vector
				thetaVec = [theta1(:);theta2(:);theta3(:)]
				         = flatten all matrices to single vector, 231x1 vector
			Vector -> Matrix
				  theta1 = reshape(thetaVec(1:110),10,11)
				         = get 110 elements and fit into 10x11 matrix
		Numeric gradient checking
			Method of preventing back propagation bugs
			Validate back propagtion derived gradient to numerically computed version before learning
			If both version are equal(almost) back propagation is working properly
			Numeric computation is expensive so use it before learning, not while learning
			gradientNumeric = (J(Θ+ε) - J(Θ-ε))/(2ε), ε≈ 0.0001
		Weight initialization
			Must use random values between -1 to +1 for weight parameters
			If all weights are 0 or same value network becomes blind therefore can't learn

10 Advice for applying Machine Learning
	Evaluation
		Split training set into 3 sets
			Training set -> Training set + Validation set + Test set
		Training set : model learning
			60% of data set
			Train each candidate model using training set
			Minimize cost using gradient descent
		Cross validation set : model selection
			20% of data set
			Evaluate each candidate using cross validation set
			Select best model from candidate models, lowest cost
		Test set : 20%, selected model final evaluation
			20% of data set
			Evaluate selected model using test set
			Checking how well trained model is 
	Cost graph
		Features
			Cost vs number of features
			Training cost decreases, high-mid-low
			Validation cost decreases then increases, high-mid-high
		Regularization
			Cost vs regularization maginitude
			Training cost increases, low-mid-high
			Validation cost decreases then increases, high-mid-high
		Data
			Cost vs training set size
			Training cost increases, gradient flattens, low-mid
			Validation cost decreases, gradient flattens, high-mid
			If high bias both cost meets at middle
			If high variance gap exists between costs
	Diagnosis - Cause
		High bias
			Under fitting problem, model is too simple
		High variance
			Over fitting problem, over trained
	Diagnosis - Symptoms
		High bias
			Train cost = high, Validation cost = high
			Low features, high regularization
		High variance
			Train cos = low, Validation cost = high
			Too many features, low regularization
	Diagnosis - Solution
		High bias
			Less features, more regularization, more data
		High variance
			More features, less regularization
